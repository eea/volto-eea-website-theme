--- History.jsx.original	2025-08-11 09:00:00.000000000 +0000
+++ History.jsx.modified	2025-08-11 09:30:00.000000000 +0000
@@ -1,6 +1,8 @@
 /**
  * History component.
  * @module components/manage/History/History
+ * Customized to enable complex versioning
+ * https://taskman.eionet.europa.eu/issues/289335?issue_count=4&issue_position=1&next_issue_id=285635
  */
 
 import React, { Component } from 'react';
@@ -13,9 +15,11 @@
   Container as SemanticContainer,
   Dropdown,
   Icon,
+  Message,
   Segment,
   Table,
 } from 'semantic-ui-react';
-import { concat, map, reverse, find } from 'lodash';
+import concat from 'lodash/concat';
+import map from 'lodash/map';
+import reverse from 'lodash/reverse';
+import find from 'lodash/find';
-import { Portal } from 'react-portal';
+import { createPortal } from 'react-dom';
 import { FormattedMessage, defineMessages, injectIntl } from 'react-intl';
-import { asyncConnect } from '@plone/volto/helpers';
+import { asyncConnect } from '@plone/volto/helpers/AsyncConnect';
 
-import {
-  FormattedDate,
-  Icon as IconNext,
-  Toolbar,
-  Forbidden,
-  Unauthorized,
-} from '@plone/volto/components';
-import { getHistory, revertHistory, listActions } from '@plone/volto/actions';
+import FormattedDate from '@plone/volto/components/theme/FormattedDate/FormattedDate';
+import IconNext from '@plone/volto/components/theme/Icon/Icon';
+import Toolbar from '@plone/volto/components/manage/Toolbar/Toolbar';
+import Forbidden from '@plone/volto/components/theme/Forbidden/Forbidden';
+import Unauthorized from '@plone/volto/components/theme/Unauthorized/Unauthorized';
+import {
+  getHistory,
+  revertHistory,
+} from '@plone/volto/actions/history/history';
+import { listActions } from '@plone/volto/actions/actions/actions';
 import { getBaseUrl } from '@plone/volto/helpers';
 import config from '@plone/volto/registry';
 
@@ -34,6 +38,22 @@
   history: {
     id: 'History',
     defaultMessage: 'History',
   },
+  newerVersionAvailable: {
+    id: 'Newer version available',
+    defaultMessage: 'Newer version available',
+  },
+  thereIsNewerVersionAt: {
+    id: 'There is a newer version at {link}',
+    defaultMessage: 'There is a newer version at {link}',
+  },
+  olderVersionAvailable: {
+    id: 'Older version available',
+    defaultMessage: 'Older version available',
+  },
+  thereIsOlderVersionAt: {
+    id: 'There is an older version at {link}',
+    defaultMessage: 'There is an older version at {link}',
+  },
 });
 
 /**
@@ -138,6 +158,25 @@
             />
           </Segment>
+          {this.props.content?.copied_to && (
+            <Message info icon attached="top">
+              <Icon name="arrow right" />
+              <Message.Content>
+                <Message.Header>
+                  <FormattedMessage {...messages.newerVersionAvailable} />
+                </Message.Header>
+                <FormattedMessage
+                  {...messages.thereIsNewerVersionAt}
+                  values={{
+                    link: (
+                      <Link to={new URL(this.props.content.copied_to).pathname}>
+                        {new URL(this.props.content.copied_to).pathname
+                          .split('/')
+                          .pop() || 'newer version'}
+                      </Link>
+                    ),
+                  }}
+                />
+              </Message.Content>
+            </Message>
+          )}
-          <Table selectable compact singleLine attached>
+          <Table
+            selectable
+            compact
+            attached
+            style={{
+              tableLayout: 'fixed',
+              width: '100%',
+              wordWrap: 'break-word',
+            }}
+          >
             <Table.Header>
               <Table.Row>
-                <Table.HeaderCell width={1}>
+                <Table.HeaderCell style={{ width: '5%' }}>
                   <FormattedMessage
                     id="History Version Number"
                     defaultMessage="#"
                   />
                 </Table.HeaderCell>
-                <Table.HeaderCell width={4}>
+                <Table.HeaderCell style={{ width: '25%' }}>
                   <FormattedMessage id="What" defaultMessage="What" />
                 </Table.HeaderCell>
-                <Table.HeaderCell width={4}>
+                <Table.HeaderCell style={{ width: '15%' }}>
                   <FormattedMessage id="Who" defaultMessage="Who" />
                 </Table.HeaderCell>
-                <Table.HeaderCell width={4}>
+                <Table.HeaderCell style={{ width: '15%' }}>
                   <FormattedMessage id="When" defaultMessage="When" />
                 </Table.HeaderCell>
-                <Table.HeaderCell width={4}>
+                <Table.HeaderCell style={{ width: '25%' }}>
                   <FormattedMessage
                     id="Change Note"
                     defaultMessage="Change Note"
                   />
                 </Table.HeaderCell>
-                <Table.HeaderCell />
+                <Table.HeaderCell style={{ width: '15%' }} />
               </Table.Row>
             </Table.Header>
@@ -280,14 +319,33 @@
             </Table.Body>
           </Table>
+          {this.props.content?.copied_from && (
+            <Message warning icon attached="bottom">
+              <Icon name="arrow left" />
+              <Message.Content>
+                <Message.Header>
+                  <FormattedMessage {...messages.olderVersionAvailable} />
+                </Message.Header>
+                <FormattedMessage
+                  {...messages.thereIsOlderVersionAt}
+                  values={{
+                    link: (
+                      <Link
+                        to={new URL(this.props.content.copied_from).pathname}
+                      >
+                        {new URL(this.props.content.copied_from).pathname
+                          .split('/')
+                          .pop() || 'older version'}
+                      </Link>
+                    ),
+                  }}
+                />
+              </Message.Content>
+            </Message>
+          )}
         </Segment.Group>
-        {this.state.isClient && (
-          <Portal node={document.getElementById('toolbar')}>
+        {this.state.isClient &&
+          createPortal(
             <Toolbar
               pathname={this.props.pathname}
               hideDefaultViewButtons
@@ -302,8 +360,9 @@
                 </Link>
               }
-            />
-          </Portal>
-        )}
+            />,
+            document.getElementById('toolbar'),
+          )}
       </Container>
     );
   }
@@ -314,7 +373,7 @@
   asyncConnect([
     {
       key: 'actions',
-      // Dispatch async/await to make the operation syncronous, otherwise it returns
+      // Dispatch async/await to make the operation synchronous, otherwise it returns
       // before the promise is resolved
       promise: async ({ location, store: { dispatch } }) =>
         await dispatch(listActions(getBaseUrl(location.pathname))),
@@ -327,6 +386,7 @@
       entries: state.history.entries,
       pathname: props.location.pathname,
       title: state.content.data?.title,
+      content: state.content.data,
       revertRequest: state.history.revert,
     }),
     { getHistory, revertHistory },